library("glmnet")  # For ridge regression fitting. It also supports elastic-net and LASSO models
## Loading required package: Matrix
## Loaded glmnet 1.9-5
library("gbm")  # For Gradient-Boosting
## Loading required package: survival
## Loading required package: splines
## Loading required package: lattice
## Loading required package: parallel
## Loaded gbm 2.1
library("rpart")  # For building decision trees
install.packages(c('glmnet', 'gbm', 'rpart'))
install.packages(c("glmnet", "gbm", "rpart"))
install.package(swirl)
install.packages(swirl)
install.packages("swirl")
library('swirl')
swirl
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
mySqrt <- sqrt(z - 1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1, 2, 3, 4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
lenght()
length()
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
bye
bye()
swirl()
library("swirl")
swirl()
num_vect is less than 1 <- num_vect < 1
"num_vect is less than 1" <- num_vect < 1
info()
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- "My" "name" "is"
my_char <- c("My" "name" "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Laurie")
my_name
past(my_char, "Laurie", collapse = " ")
paste(my_char, "Laurie", collapse = " ")
past(my_name, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, (c("x", "y", "z")))
paste(1:3, c("x", "y", "z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
swirl()
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
is.na(myData)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
inf - inf
Inf - Inf
swirl()
swirl()
swirl()
swirl()
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix 1:20
myMatrix2 <- matrix [1:20]
myMatrix2 <- matrix[1:20]
myMatrix2 <- matrix(c 1:20)
myMatrix2 <- matrix(1:20)
myMatrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = FALSE, dimnames = NULL)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(myData) <- cnames
myData
swirl()
swirl()
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Data Analysis")
swirl()
swirl()
library(swirl)
install_from_swirl("Open Intro")
swirl
swirl()
y <- 100
cars$type
sqrt(y)
z <- sqrt(y)
?sqrt
cars
10
range(cars$price)
next()
nxt()
sum(cars$price)
sum(cars$price)/
(cars$price)
1079.6/54
mean(cars$price)
mpg.midsize
sort(mpg.midsize)
Mpg.sorted <- sort(mpg.midsize)
19
median(mpg.midsize)
summary(cars$mpgCity)
nxt()
25
nxt()
19
nxt()
15 to 35
info()
28
20
nxt()
sd(mpg.midsize)
1.89554^2
25
install.packages("devtools")
library(devtools)
install.packages("Rtools")
library(swirl)
swirl()
library(devtools)
install_github("swirldev/swirl")
library(swirl)
swirl()
install_github("swirldev/swirl")
install_github(username="swirldev", repo="swirl")
swirl()
libary(swirl)
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Course_Directory")
install_from_swirl("Data_Analysis")
swirl()
install_from_swirl("Including_Data")
install_from_swirl("R_Programming")
install_from_swirl("Open_Intro")
swirl()
ls()
see_init()
data_path
my_data <- read.csv(data_path)
head(my_data)
head(air)
swirl()
bye()
install.packages("swirl")
library(swirl)
library("swirl")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z<- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
mySqrt <- z - 1^2
mySqrt<- sqrt(z - 1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
library(devtools)
install.packages("KernSmooth")
library(KernSmooth)
setwd("C:/Users/laurie.hanson/Desktop/Coursera")
